bb_data ← 3 5 ⍴ 2.2372928847280580 1.0960951589853829 0.7075902730592357 0.8166828043492210 0.7075902730592357 0.0000000000000000 0.5998905309250137 0.4993160054719562 0.6669708029197080 0.5006839945280438 0.0000000000000000 0.4001094690749863 0.5006839945280438 0.3330291970802919 0.4993160054719562
bb_ind ← 3 5 ⍴ 5 2 1 3 4 0 0 0 2 3 0 5 2 5 5
md_c ← 3 5 ⍴ 1.0000000 0.6000000 0.8000000 0.6000000 0.8000000 0.1500000 0.8000000 0.1500000 0.5809475

md_disc ← 0.9797862861805930 0.9505748482484491 0.9214621679912968 0.8906693055891434 0.8588567633110704

md_drifts ← 5 3 ⍴ ¯0.0283491736871803 0.0178771081725381 0.0043096808044729 ¯0.0183841413744211 ¯0.0044530897672834 0.0024263805987983 ¯0.0172686581005089 0.0125638544546015 0.0094452810918001 ¯0.0144179417871814 0.0157411263968213 0.0125315353728014 ¯0.0121497422218761 0.0182904634062437 0.0151125070556484

md_starts ← 3758.0500000000001819 11840.0000000000000000 1200.0000000000000000

md_vols ← 5 3 ⍴ 0.1900000 0.1900000 0.1500000 0.1900000 0.1900000 0.1500000 0.1900000 0.1900000 0.1500000 0.1900000 0.1900000 0.1500000 0.1900000 0.1900000 0.1500000


dv ← 536870912 268435456 134217728 67108864
dv ← dv, 33554432 16777216 8388608 4194304 2097152 1048576 524288
dv ← dv, 262144 131072 65536 32768 16384 8192 4096 2048 1024 512
dv ← dv, 256 128 64 32 16 8 4 2 1 536870912 805306368
dv ← dv, 671088640 1006632960 570425344 855638016 713031680 1069547520
dv ← dv, 538968064 808452096 673710080 1010565120 572653568 858980352
dv ← dv, 715816960 1073725440 536879104 805318656 671098880 1006648320
dv ← dv, 570434048 855651072 713042560 1069563840 538976288 808464432
dv ← dv, 673720360 1010580540 572662306 858993459 536870912
dv ← dv, 805306368 402653184 603979776 973078528 385875968 595591168
dv ← dv, 826277888 438304768 657457152 999817216 358875136 538574848
dv ← dv, 807862272 406552576 605372416 975183872 389033984 597170176
dv ← dv, 828646400 437926400 656873216 1002152832 357921088 536885792
dv ← dv, 805312304 402662296 603992420 973085210 385885991
dv ← dv, 536870912 805306368 939524096 335544320 234881024 721420288
dv ← dv, 411041792 616562688 920649728 1062207488 381157376 258736128
dv ← dv, 771883008 453181440 545488896 817971200 954261504 340963328
dv ← dv, 238651392 732843008 417426944 609285376 909831040 1068349120
dv ← dv, 383778848 256901168 783810616 460062740 537001998 805503019
dv ← dv, 536870912 805306368 402653184 1006632960 167772160 285212672
dv ← dv, 713031680 566231040 853540864 489684992 952631296 208928768
dv ← dv, 316801024 758317056 550076416 813154304 417505280 1009913856
dv ← dv, 172697600 297131008 704744960 553894656 847291520 499194688
dv ← dv, 954376224 204607536 306915352 766893116 536972810 805552913
dv ← dv, 536870912 805306368 402653184 469762048 301989888 721420288
dv ← dv, 92274688 264241152 941621248 741343232 169345024 924581888
dv ← dv, 395444224 619380736 1034256384 603963392 838868992 452997120
dv ← dv, 494934016 331357184 706744832 120597248 261621120 953946048
dv ← dv, 800208928 148581424 935168536 350484252 630339474 1072370923
dv ← dv, 536870912 805306368 134217728 1006632960 503316480 754974720
dv ← dv, 629145600 440401920 94371840 711983104 229113856 374079488
dv ← dv, 330694656 996212736 907247616 557531136 867573760 190918656
dv ← dv, 1041467392 490437632 766918144 643898624 462663040 125527616
dv ← dv, 672545696 202454896 373006376 288845836 1000351766 930090001
dv ← dv, 536870912 268435456 402653184 872415232 838860800 956301312
dv ← dv, 612368384 717225984 211812352 386924544 302514176 688128000
dv ← dv, 1015414784 516751360 1051492352 773734400 914432000 63877120
dv ← dv, 807741440 165200896 748683776 118489344 168296832 486802240
dv ← dv, 243663648 667747216 439124552 81674924 975249610 350138737
dv ← dv, 536870912 268435456 671088640 469762048 973078528 1023410176
dv ← dv, 713031680 339738624 912261120 797966336 176685056 71565312
dv ← dv, 510263296 865533952 814120960 961232896 887136256 668078080
dv ← dv, 116070400 382772224 1047134720 597098752 411468416 625689024
dv ← dv, 249602976 449975248 745216680 43033924 134873446 201786361
dv ← dv, 536870912 268435456 402653184 67108864 704643072 385875968
dv ← dv, 696254464 205520896 920649728 946864128 359137280 859045888
dv ← dv, 302907392 50659328 462192640 524599296 895541248 590794752
dv ← dv, 168810496 118033408 831447552 138662144 485185920 796511296
dv ← dv, 1021313184 1064304752 619184920 997458052 250479054 745865975
dv ← dv, 536870912 268435456 939524096 1006632960 838860800
dv ← dv, 889192448 645922816 46137344 476053504 584056832 210239488
dv ← dv, 465829888 820903936 689897472 73695232 249118720 110075904
dv ← dv, 315338752 610637824 517665792 1049494016 785318144 376210304
dv ← dv, 735921088 402760480 738505552 168368744 151499820 344957894
dv ← dv, 936096557 536870912 805306368 939524096 1006632960
dv ← dv, 503316480 922746880 41943040 423624704 228589568 651165696
dv ← dv, 195559424 500957184 791019520 261292032 1040285696 118407168
dv ← dv, 982065152 625250304 329533440 298984448 153690624 76845824
dv ← dv, 579619712 692987840 900670432 450334832 363187112 719119956
dv ← dv, 765461306 382730781  536870912 805306368 402653184
dv ← dv, 603979776 838860800 117440512 478150656 658505728 752877568
dv ← dv, 1060110336 141033472 209453056 244187136 272957440 678068224
dv ← dv, 1014546432 377724928 876875776 443160576 998185984 168665600
dv ← dv, 318837504 914397568 71818816 40763680 527762288 939688008
dv ← dv, 335855668 705536494 587273091 536870912 268435456
dv ← dv, 671088640 738197504 637534208 150994944 813694976 943718400
dv ← dv, 77594624 179306496 798490624 967049216 134348800 1006698496
dv ← dv, 235044864 620937216 377643008 826314752 874711040 854819840
dv ← dv, 725109248 856992512 664336768 94804544 100663328 419430416
dv ← dv, 411041832 339738668 580911142 61865993 536870912 805306368
dv ← dv, 939524096 603979776 100663296 452984832 998244352 188743680
dv ← dv, 866123776 389021696 287834112 172228608 824836096 977731584
dv ← dv, 153714688 507854848 254402560 88403968 883578880 235160576
dv ← dv, 118055424 422917888 371224704 326210368 654926368 691353392
dv ← dv, 773877944 930190180 554263078 842348331

dirVec ← dv

w ← 32 ⍝ word size
⍝ dec2bin ← {(w⍴2)⊤⍵}
⍝ bin2dec ← {(w⍴2)⊥⍵}

⍝ ⍝ Bitwise operations
⍝ sll ← {bin2dec (⍵↓dec2bin ⍺),⍵⍴0}
⍝ srl ← {bin2dec (⍵⍴0),(-⍵)↓dec2bin ⍺}
⍝ xor ← {bin2dec (dec2bin ⍺) ≠ dec2bin ⍵}
⍝ testBit ← {(dec2bin ⍵)[w-⍺-1]} ⍝ Does not work for other than scalar arguments!

testBit ← { 0 ≠ ⍺ ⎕INT32AND (1 ⎕INT32SHL ⍵) }

grayCode ← { ⍵ ⎕INT32XOR ⍵ ⎕INT32SHR 1 }

bitCount ← 30
dim ← 1
divisor ← 2*30


contract ← 2
num_mc_it ← 1048576
num_dates ← 5
num_under ← 3
num_models ← 1
num_bits ← 30

⍝ Sobol sequences using inductive approach
sobolIndI ← {
  dirVec ← ⍵
  n ← ⍺
  bitsNum ← 1↓⍴dirVec
  bits  ← ⍳bitsNum
  is ← {⍵ testBit (grayCode n)} ¨ bits
  is2 ← dirVec × (⍴dirVec)⍴is
  ⎕INT32XOR/is2
}

sobolIndR ← {
  arri ← ⍺ sobolIndI ⍵
  bitsNum ← 1↓⍴⍵
  arri÷2*bitsNum
}

⍝ TODO: implement approach by Mike Giles et al.

⍝ Implement normal distribution using the method used in R:
⍝   https://svn.r-project.org/R/trunk/src/nmath/qnorm.c
⍝   Algorithm 111 and 241 (available at JSTOR)
small_as ←           3.387132872796366608  133.14166789178437745 1971.5909503065514427 13731.693765509461125
small_as ← small_as, 45921.953931549871457 67265.770927008700853 33430.575583588128105 2509.0809287301226727

small_bs ←            1.0                   42.313330701600911252 687.1870074920579083 5394.1960214247511077 
small_bs ← small_bs , 21213.794301586595867 39307.89580009271061 28729.085735721942674 5226.495278852854561

interm_as ←             1.42343711074968357734 4.6303378461565452959  5.7694972214606914055    3.64784832476320460504
interm_as ← interm_as , 1.27045825245236838258 0.24178072517745061177 0.0227238449892691845833 (7.7454501427834140764 × 10*¯4)

interm_bs ←             1.0                    2.05319162663775882187 1.6763848301838038494 0.68976733498510000455 
interm_bs ← interm_bs , 0.14810397642748007459 0.0151986665636164571966 (5.475938084995344946 × 10*¯4) (1.05075007164441684324 × 10*¯9)

tail_as ←           6.6579046435011037772   5.4637849111641143699    1.7848265399172913358     0.29656057182850489123
tail_as ← tail_as , 0.026532189526576123093 0.0012426609473880784386 (2.71155556874348757815 × 10*¯4) (2.01033439929228813265 × 10*¯7)

tail_bs ←            1.0                     0.59983220655588793769 0.13692988092273580531 0.0148753612908506148525
tail_bs ← tail_bs ,  (7.868691311456132591 × 10*¯4) (1.8463183175100546818 × 10*¯5) (1.4215117583164458887 × 10*¯7) (2.04426310338993978564 × 10*¯15)

smallcase ← {
  x ← 0.180625 - ⍵×⍵
  op ← {x×⍵ + ⍺}
  ⍵ × (op/small_as) ÷ (op/small_bs)
}

intermediate ← {
  x ← ⍵ - 1.6
  op ← {⍺ + x×⍵}
  (op/interm_as) ÷ (op/interm_bs)
}

tail ← {
  x ← ⍵ - 5.0
  op ← {⍺ + x×⍵}
  (op/tail_as) ÷ (op/tail_bs)
}

ugaussianEl ← {
   dp ← ⍵ - 0.5

  ⍝ case 1
   R1 ← smallcase dp
   
  ⍝ case 2  
   pp ← 0.5 + dp×-×dp
   r ← (-⍟pp)*0.5
   x ← ((intermediate r) × r≤5.0) + (tail r) × r>5.0
   R2 ← x × ×dp

  ⍝ conditional  
  R2 × (1 - 0.425≥|dp) + R1 × (0.425≥|dp)
}

ugaussian ← { ugaussianEl ¨ ⍵ }

brownianBridge ← {
  num_under ← ⍵[1]
  num_dates ← ⍵[2]
  bb_ind ← ⍵[3]
  bb_data ← ⍵[4]
  gauss ← ⍵[5]

  bb_bi ← bb_ind[1;]
  bb_li ← bb_ind[2;]
  bb_ri ← bb_ind[3;]
  bb_sd ← bb_data[1;]
  bb_lw ← bb_data[2;]
  bb_rw ← bb_data[3;]
  gauss2Dt ← (num_dates num_under)⍴gauss
  sz ← (⍉(num_under num_dates)⍴bb_sd) × gauss2Dt
  bbrow ← ((num_dates+1) num_under)⍴0

  step ← {
    next ← (bb_lw[⍵]×bbrow[bb_li[⍵]+1;]) + sz[⍵;] + (bb_rw[⍵]×bbrow[bb_ri[⍵]+1;])
    ⍝ bbrow[bb_bi[⍵]+1;] ← next ⍝ Parse error!
    ⍵+1
  }
  
  variable_not_used ← (step ⍣ num_dates) 1
  (1↓bbrow) - num_dates↑bbrow
}

⍝ Sets the values in the upper triangle to zero
clearUpperTriangle ← {
  n ← 1↑⍴ ⍵
  ⍵ × (⍳n)∘.≥⍳n
}

⍝ Black-Scholes
⍝ Currently num_under must be a constant, should be given as argument
correlateDeltas ← {
  md_c ← ⍺
  bb_arr ← ⍵  
  ⍝ Clear upper triangle - why are the numbers there when we don't use them?  
  bb_arr +.× ⍉ clearUpperTriangle md_c
}

combineVs ← {
  n_row ← ⍵[1]
  vol_row ← ⍵[2]
  dr_row ← ⍵[3]
  dr_row + n_row × vol_row
}

mkPrices ← {
  md_starts ← ⍵[1]
  md_vols ← ⍵[2]
  md_drifts ← ⍵[3]
  noises ← ⍵[4]
  e_rows ← *combineVs noises md_vols md_drifts

  1↓⍉×\md_starts , ⍉ e_rows
}

blackScholes ← {
  num_under ← ⍵[1]
  md_c ← ⍵[2]
  md_vols ← ⍵[3]
  md_drifts ← ⍵[4]
  md_starts ← ⍵[5]
  bb_arr ← ⍵[6]
  noises ← md_c correlateDeltas bb_arr
  mkPrices (md_starts md_vols md_drifts noises)
}

payoff2 ← {
  md_disc ← ⍺
  xss ← ⍵
  mins ← ⌊/xss × (⍴xss)⍴ ÷ 3758.05 11840.0 1200.0

  ⍝ mins[1] ≥ 1: return ← 1150.0 × md_disc[1]
  ⍝ mins[2] ≥ 1: return ← 1300.0 × md_disc[2]
  ⍝ mins[3] ≥ 1: return ← 1450.0 × md_disc[3]
  ⍝ mins[4] ≥ 1: return ← 1600.0 × md_disc[4]
  ⍝ mins[5] ≥ 1: return ← 1750.0 × md_disc[5]
  ⍝ mins[5] ≥ 0.75: return ← 1000.0 × md_disc[5]

  mins[5] × 1000.0 × md_disc[5]
}

compute ← {
  n ← ⍵
  payoffs ← 0
  
  compute1 ← {
    sobol_mat ← ⍵ sobolIndR dirVec
    gauss_mat ← ugaussian sobol_mat

    bb_mat ← brownianBridge (num_under num_dates bb_ind bb_data gauss_mat)

    bs_mat ← blackScholes (num_under md_c md_vols md_drifts md_starts bb_mat)

    md_disc payoff2 bs_mat
  }

  (+/compute1¨⍳n)÷n
}

compute num_mc_it
